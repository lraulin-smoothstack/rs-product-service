openapi: 3.0.0
info:
  description: >
    Finest apparel by Wu, Raulin & Co. Product service.


  version: "1.0.0-oas3"
  title: Wu, Raulin & Co. Outfitter Product Service
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: lee.raulin@smoothstack.com
tags:
  - name: products
    description: Everything about the world's finest apparel products by Wu, Raulin & Co.
paths:
  /{proxy+}:
    x-amazon-apigateway-integration:
      uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductLambda.Arn}/invocations"
      credentials: !GetAtt MyApiGatewayRole.Arn
      passthroughBehavior: when_no_match
      httpMethod: POST
      type: aws_proxy
  /products:
    get:
      tags:
        - products
      summary: Finds products in the store
      description: Multiple status values can be provided with comma separated strings
      operationId: readProducts
      parameters:
        - name: department
          in: query
          description: Department to filter by
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Category to filter by
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: Invalid status value
    post:
      tags:
        - products
      summary: Creates a new product for the store
      operationId: createProduct
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Product created
        "405":
          description: Invalid input
      security:
        - Bearer: []
      requestBody:
        $ref: "#/components/requestBodies/Product"
  "/products/{product_id}":
    get:
      tags:
        - products
      summary: Finds a product by ID
      description: Returns a single product
      operationId: readProductById
      parameters:
        - name: product_id
          in: path
          description: ID of products to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
    put:
      tags:
        - products
      summary: Updates a product
      operationId: updateProduct
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: ID of products that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
        "405":
          description: Invalid input
      security:
        - Bearer: []
      requestBody:
        $ref: "#/components/requestBodies/Product"
    delete:
      tags:
        - products
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successfully deleted
        "404":
          description: Product not found
      security:
        - Bearer: []
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
servers:
  - url: "https://virtserver.swaggerhub.com/SmoothStack38/FashionStore/1.0.0"
  - url: "http://virtserver.swaggerhub.com/SmoothStack38/FashionStore/1.0.0"
components:
  requestBodies:
    Product:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
        application/xml:
          schema:
            $ref: "#/components/schemas/Product"
      description: products object that needs to be added to the store
      required: true
  securitySchemes:
    Bearer:
      type: apiKey
      name: JWT
      in: header
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - department
        - category
        - photo_url
        - wholesale_price
        - retail_price
        - stock
        - discountable
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        department:
          type: string
          enum:
            - mens
            - womens
            - kids
        category:
          type: string
        photo_url:
          type: string
        wholesale_price:
          type: number
          format: float
        retail_price:
          type: number
          format: float
        stock:
          type: integer
          format: int32
        discountable:
          type: boolean
      xml:
        name: Product
    ApiResponse:
      type: object
      properties:
        Content-Type:
          type: string
        Status-Code:
          type: integer
        message:
          type: string
        data:
          type: array
          items:
            type: object
