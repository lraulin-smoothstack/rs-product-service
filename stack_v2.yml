---
AWSTemplateFormatVersion: 2010-09-09

Description: API Gateway, Lambda, and Dynamo.

Resources:
  BaseLambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Base permissions needed by all lambda functions.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource: "*"

  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ProductApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-ProductApiGateway"
      Description: A description
      FailOnWarnings: true
      Body:
        openapi: 3.0.0
        info:
          description: >
            Finest apparel by Wu, Raulin & Co. Product service.


          version: "1.0.0-oas3"
          title: Wu, Raulin & Co. Outfitter Product Service
          termsOfService: "http://swagger.io/terms/"
          contact:
            email: lee.raulin@smoothstack.com
        tags:
          - name: products
            description: Everything about the world's finest apparel products by Wu, Raulin & Co.
        paths:
          /products:
            get:
              tags:
                - products
              summary: Finds products in the store
              description: Multiple status values can be provided with comma separated strings
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductLambda.Arn}/invocations"
                credentials: !GetAtt ProductApiGatewayRole.Arn
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              operationId: readProducts
              parameters:
                - name: department
                  in: query
                  description: Department to filter by
                  required: false
                  schema:
                    type: string
                - name: category
                  in: query
                  description: Category to filter by
                  required: false
                  schema:
                    type: string
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: "#/components/schemas/Product"
                    application/xml:
                      schema:
                        type: array
                        items:
                          $ref: "#/components/schemas/Product"
                "400":
                  description: Invalid status value
            post:
              tags:
                - products
              summary: Creates a new product for the store
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductLambda.Arn}/invocations"
                credentials: !GetAtt ProductApiGatewayRole.Arn
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              operationId: createProduct
              parameters:
                - name: Authorization
                  in: header
                  required: true
                  schema:
                    type: string
              responses:
                "201":
                  description: Product created
                "405":
                  description: Invalid input
              # security:
              #   - Bearer: []
              requestBody:
                $ref: "#/components/requestBodies/Product"
          "/products/{product_id}":
            get:
              tags:
                - products
              summary: Finds a product by ID
              description: Returns a single product
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductLambda.Arn}/invocations"
                credentials: !GetAtt ProductApiGatewayRole.Arn
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              operationId: readProductById
              parameters:
                - name: product_id
                  in: path
                  description: ID of products to return
                  required: true
                  schema:
                    type: integer
                    format: int64
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Product"
                    application/xml:
                      schema:
                        $ref: "#/components/schemas/Product"
                "404":
                  description: Product not found
            put:
              tags:
                - products
              summary: Updates a product
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductLambda.Arn}/invocations"
                credentials: !GetAtt ProductApiGatewayRole.Arn
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              operationId: updateProduct
              parameters:
                - name: Authorization
                  in: header
                  required: true
                  schema:
                    type: string
                - name: product_id
                  in: path
                  description: ID of products that needs to be updated
                  required: true
                  schema:
                    type: integer
                    format: int64
              responses:
                "200":
                  description: OK
                "405":
                  description: Invalid input
              # security:
              #   - Bearer: []
              requestBody:
                $ref: "#/components/requestBodies/Product"
            delete:
              tags:
                - products
              summary: Deletes a product
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductLambda.Arn}/invocations"
                credentials: !GetAtt ProductApiGatewayRole.Arn
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              operationId: deleteProduct
              parameters:
                - name: Authorization
                  in: header
                  required: true
                  schema:
                    type: string
                - name: product_id
                  in: path
                  description: product id to delete
                  required: true
                  schema:
                    type: integer
                    format: int64
              responses:
                "204":
                  description: Successfully deleted
                "404":
                  description: Product not found
              # security:
              #   - Bearer: []
        components:
          requestBodies:
            Product:
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Product"
                application/xml:
                  schema:
                    $ref: "#/components/schemas/Product"
              description: products object that needs to be added to the store
              required: true
          schemas:
            Product:
              type: object
              required:
                - id
                - name
                - department
                - category
                - photo_url
                - wholesale_price
                - retail_price
                - stock
                - discountable
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
                description:
                  type: string
                department:
                  type: string
                  enum:
                    - mens
                    - womens
                    - kids
                category:
                  type: string
                photo_url:
                  type: string
                wholesale_price:
                  type: number
                  format: float
                retail_price:
                  type: number
                  format: float
                stock:
                  type: integer
                  format: int32
                discountable:
                  type: boolean
              xml:
                name: Product
            ApiResponse:
              type: object
              properties:
                Content-Type:
                  type: string
                Status-Code:
                  type: integer
                message:
                  type: string
                data:
                  type: array
                  items:
                    type: object

  ProductApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ProductApiGateway
      StageName: prod

  ProductApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ProductLambda.Arn

  ProductLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ProductLambdaRole.Arn
      Handler: index.handleHttpRequest
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Select [1, !Split ["/", !GetAtt ProductTable.Arn]]
      Code:
        ZipFile: |
          exports.handlers = function(event, context) {}

  ProductAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - "\n"
            - - "// the code, line by line from above"
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - ProductAuthLambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 60

  ProductAuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource:
                  Fn::GetAtt:
                    - ProductAuthLambda
                    - Arn
  ProductApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials:
        Fn::GetAtt:
          - ProductApiAuthorizerRole
          - Arn
      AuthorizerResultTtlInSeconds: 300
      AuthorizerUri:
        Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
                - ProductAuthLambda
                - Arn
            - "/invocations"
      IdentitySource: method.request.header.Authorization
      IdentityValidationExpression: "^[a-zA-Z0-9]{3,32}$"
      Name: product-authorizer
      RestApiId:
        Ref: ProductApiGateway
      Type: TOKEN

  ProductResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ProductApiGateway
      ParentId:
        Fn::GetAtt:
          - ProductApiGateway
          - RootResourceId
      PathPart: product

  Post:
    Type: AWS::ApiGateway::Method
    DependsOn: LambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: ProductApiAuthorizer
      RestApiId:
        Ref: ProductApiGateway
      ResourceId:
        Ref: Resource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - ProductLambda
                  - Arn
              - "/invocations"
        IntegrationResponses:
          - StatusCode: 204
        RequestTemplates:
          application/json: '{"action": "put", "body": $input.json(''$'')}'
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 204
